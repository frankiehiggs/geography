# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_points.ipynb.

# %% auto 0
__all__ = ['in_hull', 'Points']

# %% ../nbs/02_points.ipynb 3
import numpy as np
from scipy.spatial import ConvexHull
import functools
import collections
from typing import Literal, Optional
from fastcore.basics import patch

# %% ../nbs/02_points.ipynb 4
def in_hull(point:np.array,  # 1d array 
            hull:ConvexHull, # see scipy.spatial
            tol=1e-9): 
    """checks whether point is inside hull"""
    assert len(point)==hull.ndim, "expect point, hull in the same dimension"
    W,b = hull.equations[:,:-1], hull.equations[:,-1]
    return np.all(W@point+b<=tol)

# %% ../nbs/02_points.ipynb 5
class Points:
    """define binomial or poisson point process in a convex polytope"""
    def __init__(self, n:int, # (expected) number of points 
                d=2,  # dimensionality
                seed:Optional[int]=None, 
                law: Literal["binomial","poisson"]="binomial", # distribution of the points 
                shape:Optional[ConvexHull]=None): # sample from shape, default to unit box
        assert law in ["binomial","poisson"]
        self.rng = np.random.default_rng(seed)
        self.n = rng.poisson(n) if law == "poisson" else n
        self.d = d
        self.shape = shape


# %% ../nbs/02_points.ipynb 6
@patch
def points(self:Points):
    """actually generate points from the prescribed distribution"""
    if self.shape is None: # unit cube
        return self.rng.uniform(size=(self.n,self.d))
    else:
        ps = []
        for _ in range(self.n):
            while True:
                # mint new point, cannot pass seed
                sample = np.random.default_rng().uniform(self.shape.min_bound, self.shape.max_bound,(self.d,))                     
                if in_hull(sample, self.shape): ps.append(sample); break
        assert len(ps)==self.n
        return np.array(ps)
