# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['RGG']

# %% ../nbs/00_core.ipynb 3
import numpy as np
import functools
import collections
from fastcore.basics import patch
from .points import Points

# %% ../nbs/00_core.ipynb 4
class RGG:
    """random geometric graph"""
    def __init__(self,n:int, # average number of points
                 r:float,  # connection radius
                 d:int=2, # dimension
                 law = "binomial", # either poisson or binomial
                 shape = None): # convex polytope
        self.n = n
        self.r = r
        self.points = Points(n=n,d=d, law=law, shape=shape).points()
    
    @functools.cached_property
    def distance_matrix(self):
        a = self.points
        diff = a[:,None,:] - a[None,:,:]
        return np.linalg.norm(diff,axis=-1)

    @functools.cached_property
    def adj(self):
        mask = self.distance_matrix < self.r
        return {i: [j for j,v in enumerate(row) if v and j != i] for i,row in enumerate(mask)}

    def n_comp(self):
        def dfs(gr,s):
            for v in gr[s]:
                if v not in self.parent:
                    self.parent[v]=s
                    dfs(gr,v)
                    self.topo.append(v)
        self.parent = {}
        self.topo=[]
        count = 0
        for i in range(self.n):
            if i not in self.parent:
                count+=1
                self.parent[i]=None
                dfs(self.adj,i)
                self.topo.append(i)
        return count
        
    def degree_distribution(self):
        dgr=collections.Counter([len(v) for _,v in self.adj.items()])
        return np.array(list(dgr.items()))

    def cyclic(self):
        for k, lst in self.adj.items():
            for v in lst:
                if k != self.parent[v] and v!=self.parent[k]: 
                    return True
        return False

    def n_tri(self):
        A = (self.distance_matrix<=self.r).astype(np.int64)
        np.fill_diagonal(A,0)
        return np.trace(np.linalg.matrix_power(A,3))//6

